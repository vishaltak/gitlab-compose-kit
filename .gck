#!/usr/bin/env bash

GCK_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

_gck_list_make_targets() {
    make -C "${GCK_PATH}"  help | sed -nr "s/^- //p" || return 1
}

gck() {
    case "$1" in
        cd)
            local path=${GCK_PATH}

            if [[ -n ${2} ]]; then
                path="${path}/${2}"
            fi

            cd "${path}" || return 1
            ;;
        refresh)
            echo -n "Reloading GCK Bash integration... "
            # shellcheck source=.gck
            source "${BASH_SOURCE[0]}"
            echo "DONE"
            ;;
        *)
            make -C "${GCK_PATH}" "${@}" || return 1
            ;;
    esac
}

_gck_comp() {
    local cur prev opts

    COMPREPLY=()

    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="cd refresh $(_gck_list_make_targets)"

    case "${prev}" in
        cd)
            local -a tokens
            local x tmp quoted
            local IFS=$'\n'

            compopt -o nospace

            _quote_readline_by_ref "$cur" quoted

            x=$(compgen -d -- "${GCK_PATH}/${quoted}")

            while read -r tmp; do
                tokens+=( "${tmp//${GCK_PATH}\//}" )
            done <<< "${x}"

            if [[ ${#tokens[@]} -ne 0 ]]; then
                compopt -o filenames 2>/dev/null
                COMPREPLY+=( "${tokens[@]}" )
            fi

            return 0
            ;;
        *)
            ;;
    esac

    mapfile -t COMPREPLY < <(compgen -W "${opts}" -- "${cur}")

    return 0
}

complete -F _gck_comp gck
