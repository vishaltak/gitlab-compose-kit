#!/usr/bin/env bash

echo ">> Enter SSH_TARGET_HOST:"
echo -n "[$SSH_TARGET_HOST]: "
read NEW_SSH_TARGET_HOST

if [[ -n "$NEW_SSH_TARGET_HOST" ]]; then
  while [[ -z "$NEW_SSH_CONFIG_USER" ]]; do
    NEW_SSH_CONFIG_USER="${NEW_SSH_CONFIG_USER-$SSH_CONFIG_USER}"
    echo ">> Enter SSH_CONFIG_USER that is used to configure remote system:"
    echo -n "[$NEW_SSH_CONFIG_USER]: "
    read NEW_SSH_CONFIG_USER
  done

  NEW_SSH_TARGET_USER="${SSH_TARGET_USER-gitlab}"
  NEW_SSH_TARGET_PORT="${SSH_TARGET_PORT-22}"
  NEW_SSH_TARGET_DIR="${SSH_TARGET_DIR-gitlab-compose-kit}"
elif [[ -z "$SSH_TARGET_HOST" ]]; then
  # change SSH_TARGET_HOST only if it is already set
  unset NEW_SSH_TARGET_HOST
fi

if [[ -n "$NEW_SSH_TARGET_HOST" ]]; then
  echo ">> Configured in remote mode..."

  COMMAND_PREFIX="sudo"
  [[ "$SSH_CONFIG_USER" == "root" ]] && COMMAND_PREFIX=""

  echo ">> Configuring server..."
  read -r -d '' commands <<EOF
  set -xeo pipefail
  $COMMAND_PREFIX apt-get update -y -qq
  $COMMAND_PREFIX apt-get install -y sudo rsync docker.io docker-compose zram-config
  id "$NEW_SSH_TARGET_USER" || $COMMAND_PREFIX useradd -s /bin/bash -m "$NEW_SSH_TARGET_USER"
  $COMMAND_PREFIX usermod -aG docker "$NEW_SSH_TARGET_USER"
  $COMMAND_PREFIX cp -rv ~/.ssh ~$NEW_SSH_TARGET_USER/
  $COMMAND_PREFIX chown -R  "$NEW_SSH_TARGET_USER:$NEW_SSH_TARGET_USER" ~$NEW_SSH_TARGET_USER/.ssh
  $COMMAND_PREFIX systemctl enable zram-config
  $COMMAND_PREFIX systemctl start zram-config
EOF

  ssh -T -o Port="${NEW_SSH_TARGET_PORT}" "$NEW_SSH_CONFIG_USER@$NEW_SSH_TARGET_HOST" "$commands"

  if [[ "$(uname -s)" == "Darwin" ]]; then
    echo '>> Configuring `~root/known_hosts`...'
    sudo ssh -o Port="${NEW_SSH_TARGET_PORT}" "$NEW_SSH_CONFIG_USER@$NEW_SSH_TARGET_HOST" true
  fi

  echo '>> Now use `make sync`.'
else
  echo ">> Configured in local mode."
fi

save_if_changed() {
  key="$1"
  value="${!key}"
  new_key="NEW_$1"
  new_value="${!new_key}"

  if ! declare -p "$new_key" &>/dev/null; then
    return 0
  fi

  if [[ "$value" == "$new_value" ]]; then
    return 0
  fi

  echo "export $key=\"${new_value}\"" >> gck.env
}

save_if_changed SSH_TARGET_HOST
save_if_changed SSH_TARGET_USER
save_if_changed SSH_TARGET_PORT
save_if_changed SSH_TARGET_DIR
save_if_changed SSH_CONFIG_USER

echo ">> Done."
